{"version":3,"sources":["app/Timer.js","app/Typing.js","app/App.js","serviceWorker.js","index.js"],"names":["Timer","ref","durationSec","onDone","useState","started","setStarted","current","setCurrent","done","setDone","useInterval","now","Date","difference","differenceInSeconds","useImperativeHandle","start","timeLeft","forwardRef","DURATION","Global","createGlobalStyle","A_LETTER","Root","styled","div","Center","Right","Err","Rest","ErrRest","CursorStyle","CursorInner","Cursor","TimerBox","InfoBox","ending","number","hide","className","SelfCenter","ParticleTemplate","focus","Particle","dx","dy","children","style","transform","Word","input","word","hideCursor","finish","right","err","rest","mistaken","times","Math","max","length","i","Typing","words","good","setGood","bad","setBad","setInput","particles","setParticles","wordIndex","setWordIndex","nextWord","newParticles","angle","random","PI","distance","cos","sin","particle","push","concat","startGame","timerRef","handleKeyboard","e","key","substring","test","useEffect","document","addEventListener","removeEventListener","useRef","targetColor","props","useSpring","color","padding","from","hideOnDone","opacity","rotateOnDone","config","friction","clamp","to","map","x","App","xs","shuffle","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","getElementById","URL","process","href","origin","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.41ffb7af.chunk.js","sourcesContent":["import { differenceInSeconds } from 'date-fns';\nimport React, { useState, useImperativeHandle, forwardRef } from 'react';\nimport useInterval from '@use-it/interval';\n\nlet CHECK_INTERVAL = 100\n\nlet Timer = ({ durationSec, onDone }, ref) => {\n  let [started, setStarted] = useState(null)\n  let [current, setCurrent] = useState(null)\n  let [done, setDone] = useState(false)\n\n  useInterval(() => {\n    if (done) return\n    if (!started) return\n\n    let now = new Date()\n    let difference = differenceInSeconds(now, started)\n    if (difference !== current) setCurrent(difference)\n    let timeLeft = durationSec - current\n    if (timeLeft <= 0) {\n      onDone()\n      setDone(true)\n    }\n  }, CHECK_INTERVAL)\n\n  useImperativeHandle(ref, () => ({\n    start: () => {\n      if (!started) setStarted(new Date())\n    },\n    // clear: () => to start after done have finished\n  }))\n\n  let timeLeft = durationSec - current\n\n  return <div>\n    { timeLeft } sec.\n  </div>\n}\nTimer = forwardRef(Timer)\n\nexport default Timer\n","import { animated, useSpring } from 'react-spring';\nimport { times, random } from 'lodash'\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components'\n\nimport Timer from './Timer';\n\nlet DURATION = 60\n\nlet Global = createGlobalStyle`\n  * {\n    margin: 0;\n    padding: 0;\n  }\n  html, body, #root, #root > div {\n    height: 100%;\n  }\n  .show, .hide {\n    transition: opacity 0.3s;\n  }\n  .show {\n    opacity: 1;\n  }\n  .hide {\n    opacity: 0;\n  }\n`\n\nlet A_LETTER = /^.$/\nlet Root = styled.div`\n  font-size: 48pt;\n  display: flex;\n  overflow: hidden;\n`\nlet Center = styled.div`\n  margin: auto;\n  position: relative;\n`\nlet Right = styled.div`\n  color: #06c;\n  display: inline;\n`\nlet Err = styled.div`\n  display: inline;\n  color: #f30;\n  text-decoration: line-through;\n`\nlet Rest = styled.div`\n  display: inline;\n  color: #b3b3cc;\n`\nlet ErrRest = styled.div`\n  display: inline;\n  color: #b3b3cc;\n  text-decoration: line-through;\n`\nlet CursorStyle = styled.div`\n  display: inline;\n  position: relative;\n`\nlet CursorInner = styled.div`\n  position: absolute;\n  left: 0;\n  top: 0;\n  transform: translateX(-0px);\n  border-right: solid 1px #345;\n  height: 100%;\n`\nlet Cursor = () =>\n  <CursorStyle>\n    <CursorInner />\n  </CursorStyle>\nlet TimerBox = styled.div`\n  position: fixed;\n  z-index: 100;\n  right: 0;\n  bottom: 0;\n  color: gray;\n  font-size: 32px;\n`\nlet InfoBox = styled.div`\n  position: fixed;\n  z-index: 100;\n  left: 0;\n  bottom: 0;\n  color: gray;\n  font-size: 32px;\n`\n\nfunction Typing({ words }) {\n  let [started, setStarted] = useState(false)\n  let [done, setDone] = useState(false)\n  let [good, setGood] = useState(0)\n  let [bad, setBad] = useState(0)\n\n  let [input, setInput] = useState('')\n  let [particles, setParticles] = useState([])\n  let [wordIndex, setWordIndex] = useState(0)\n  let word = words[wordIndex]\n  let nextWord = () => {\n\n    let success = input === word\n    if (success) {\n      setGood(good + 1)\n    } else {\n      setBad(bad + 1)\n    }\n\n    let newParticles = []\n    // times(10, () => {\n      let { dx, dy } = distance()\n      let particle = { input, word, dx, dy }\n      newParticles.push(particle)\n    // })\n    setParticles(particles.concat(newParticles))\n    setWordIndex(wordIndex + 1)\n    setInput('')\n  }\n\n  let startGame = () => {\n    timerRef.current.start()\n    setStarted(true)\n  }\n\n  function handleKeyboard(e) {\n    if (done) return\n\n    if (e.key === ' ') { // || e.key === 'Enter') {\n      if (input === '') return // NOTE: double presses are ok.....\n      nextWord()\n    } else\n    if (e.key === 'Backspace') {\n      setInput(input.substring(0, input.length - 1))\n    } else\n    if (A_LETTER.test(e.key)) {\n      startGame()\n      input += e.key\n      setInput(input)\n    }\n  }\n\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyboard)\n    return () => {\n      document.removeEventListener('keydown', handleKeyboard)\n    }\n  })\n\n  let timerRef = useRef()\n\n  let onTimer = () => {\n    setDone(true)\n  }\n\n  let targetColor = done ? '#06c' : 'gray'\n  let props = useSpring({\n    color: targetColor,\n    padding: done ? 30 : 0,\n    from: {\n      color: 'gray',\n      padding: 0,\n    }\n   })\n  let hideOnDone = useSpring({ opacity: done ? 0 : 1, from: { opacity: 1 } })\n\n  let rotateOnDone = useSpring({\n    config: {\n      friction: 1,\n      clamp: 1,\n    },\n    from: {\n      opacity: 1,\n      transform: 'rotate(0deg) scale(1)',\n\t\t},\n    to: !done ? [] : [\n\t\t\t{\n\t\t\t\topacity: 1,\n\t\t\t\ttransform: 'rotate(360deg) scale(1.1)',\n\t\t\t},\n\t\t\t{\n\t\t\t\topacity: 0,\n\t\t\t\ttransform: 'rotate(0deg) scale(0)',\n\t\t\t},\n\t\t],\n\t})\n\n  return <Root>\n    <Global />\n    <Center>\n      {\n        particles.map( (x, i) =>\n          <Particle dx={x.dx} dy={x.dy} key={i}>\n            <Word input={x.input} word={x.word} finish={true} />\n          </Particle>\n        )\n      }\n      <Particle dx={0} dy={0} focus={true}>\n\t\t\t\t<animated.div style={rotateOnDone}>\n\t\t\t\t\t<Word input={input} word={word} focus={true} hideCursor={done} />\n\t\t\t\t</animated.div>\n      </Particle>\n    </Center>\n    { started ? null :\n    <InfoBox>\n      <ul>\n        <li>\n          Type space after every word;\n        </li>\n        <li>\n          The timer starts after any input;\n        </li>\n        <li>\n          If you need to restart — reload the page;\n        </li>\n      </ul>\n    </InfoBox>\n    }\n\t\t<TimerBox>\n\t\t\t<animated.div style={props}>\n        <animated.div style={hideOnDone}>\n\t\t\t\t\t<Timer ref={timerRef}\n\t\t\t\t\t\tdurationSec={DURATION}\n\t\t\t\t\t\tonDone={onTimer}\n\t\t\t\t\t/>\n        </animated.div>\n        <div>\n          { good } hit{ ending(good, 's') }\n        </div>\n        <div>\n          { bad } miss{ ending(bad, 'es') }\n        </div>\n\t\t\t</animated.div>\n\t\t</TimerBox>\n  </Root>\n}\n\nfunction ending(number, ending) {\n  let hide = number === 1 ? 'hide' : 'show'\n  return <span className={hide}>{ ending }</span>\n}\n\nfunction distance() {\n  let angle = random(0, Math.PI * 2, true)\n  let distance = random(300, 600)\n  let dx = distance * Math.cos(angle)\n  let dy = distance * Math.sin(angle)\n  return { dx, dy }\n}\n\nlet SelfCenter = styled.div`\n  transform: translate(-50%, -50%);\n`\nlet ParticleTemplate = styled.div`\n  * {\n    ${({focus}) => focus ? '' : 'color: #ddd !important;'}\n  }\n  ${({focus}) => focus ? '' : 'font-size: 32px;'}\n  position: absolute;\n  white-space: nowrap;\n`\nfunction Particle({ dx, dy, children, focus }) {\n  let style = {\n    transform: `translate(${dx}px, ${dy}px)`\n  }\n  return <ParticleTemplate style={style} focus={focus}>\n    <SelfCenter>\n      { children }\n    </SelfCenter>\n  </ParticleTemplate>\n}\n\nfunction Word({ input, word, focus, hideCursor, finish }) {\n  let right = ''\n  let err = ''\n  let rest = ''\n\n  let mistaken = false\n  times(Math.max(word.length, input.length), i => {\n    if (i < input.length) {\n      if (!mistaken) {\n        mistaken = i >= word.length || input[i] !== word[i]\n      }\n      if (mistaken) {\n        err += input[i]\n      } else {\n        right += input[i]\n      }\n    } else {\n      rest += word[i]\n    }\n  })\n\n  return <>\n    <Right>{ right }</Right>\n    <Err>{ err }</Err>\n    { focus && !hideCursor ? <Cursor /> : null }\n    { finish ?\n\t\t\t<ErrRest>{ rest }</ErrRest> :\n\t\t\t<Rest>{ rest }</Rest>\n\t\t}\n  </>\n}\n\nexport default Typing\n","import React from 'react';\n\nimport Typing from './Typing';\nimport words from './words.json';\nimport { shuffle } from 'lodash'\n\nfunction App() {\n  let xs = shuffle(words)\n  return (\n    <Typing words={xs} />\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}